{"posts":[{"title":"第一篇文章","text":"执行计划 基本语法 集合 List Map Set 多线程 线程 线程池 IO 设计模式 创建型模式（工厂方法、抽象工厂、生成器、原型、单例） 结构型模式（适配器、桥接、组合、装饰、外观、享元、代理） 行为模式（责任链、命令、迭代器、中介者、备忘录、观察者、状态、策略、模板方法、访问者） JDK源码 集合： ArrayList LinkedList Vector ArrayDeque PriorityQueue HashSet TreeSet HashMap HashTable LinkedHashMap TreeMap 并发： 其他： Object Thread ThreadLocal String StringBuilder StringBuffer 框架 Spring SpringBoot MyBatis Tomcat 数据库 MySQL Redis MongoDB ElasticSearch ShardingSphere 数据结构与算法分析 常用算法 框架算法 Java虚拟机 Java虚拟机的内存布局 GC算法及几种垃圾收集器 类加载机制，也就是双亲委派模型 Java内存模型 happens-before规则 volatile关键字使用规则 Web 工具 Docker Kubernetes 最早看的 架构探险 从零开始写Java Web框架，黄勇写的，算是一种启蒙，作者自己写了一套ioc和aop框架以及mvc请求分发框架。 跟着写了一遍，基本明白了Spring 和SpringMVC是怎么工作的 然后顺着思路看了2遍Spring和SpringMVC的源码，一遍是跟着流程走了一边，一遍是基于接口和类的功能整体了解了一遍架构设计 再后来看了how tomcat works，看了一遍中文的，时隔一年又看了一遍英文的，tomcat的作者亲自讲解tomcat的进化，怎么从一个几十行的弱鸡http服务器变成一个servlet容器的，跟着书和各种源码把tomcat的演变写了一遍，真正的源码也过了一遍，但是分支太多了 作为一个Java web 开发者，我觉得从tomcat的启动到tomcat接受http请求到SpringMVC路由分发请求，到业务代码处理，到模板渲染，到返回对应的http信息都应该了解对应的过程，这样遇到很多问题都能第一时间判断出对应的位置，让一些’很神奇’的问题不再神奇 然后就是netty了，看了一遍异步的事件驱动reactor模型的nio服务器实现，对异步，多线程，nio理解上了一个新的台阶 中间穿插读了util包的各种类 Spring几乎已经不需要解释了，用到的都应该去阅读一下，无论是设计思想，代码规范，还是设计模式，接口设计，类加载，都是非常优秀的源码 tomcat太大了，并不是很推荐阅读，源码对于阅读者也不是很友好，但是how tomcat works还是很值得阅读的 netty本身同样很优秀，但是更重要的是实现的思想 总之阅读源码有什么感觉呢，就好像打开了一扇通往更大世界的大门，能看到厉害的代码技巧，健全的错误异常机制，更重要的是对已有问题的解决方案，和解决问题的思路，这些都是一个程序员成长过程中最好的教材","link":"/2023/08/06/First%20Blog/"}],"tags":[{"name":"knowledge","slug":"knowledge","link":"/tags/knowledge/"},{"name":"plan","slug":"plan","link":"/tags/plan/"}],"categories":[{"name":"Java","slug":"Java","link":"/categories/Java/"}],"pages":[]}